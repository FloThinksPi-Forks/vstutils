default:
  image: vstconsulting/images:build
  cache: &global_cache
    paths:
      - node_modules/
    policy: pull-push


variables:
  GET_SOURCES_ATTEMPTS: 3
  ARTIFACT_DOWNLOAD_ATTEMPTS: 3
  RESTORE_CACHE_ATTEMPTS: 3
  DJANGO_LOG_LEVEL: 'CRITICAL'
  TOX_ARGS: "--workdir /cache/.tox_vstutils_${CI_BUILD_REF_NAME}"
  CC: "ccache gcc"
  UWSGI_PROFILE: "minimal"

stages:
  - code_standarts
  - test
  - release


.branch_tests_template: &branch_tests
  stage: test
  image: vstconsulting/images:build
  variables:
    TOX_ENVS: "flake,pylint,py36-django-install,py37-django-install"
  before_script:
    - if [ "${CI_BUILD_REF_NAME}" != "master" -a "${CI_BUILD_REF_NAME}" != "developer" ]; then export TOX_ARGS="--workdir /tmp/.tox_vstutils_${CI_BUILD_REF_NAME}"; fi
  script:
   - tox -e $TOX_ENVS $TOX_ARGS
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" || $CI_PIPELINE_SOURCE == "external_pull_request_event"'
      when: on_success
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_TAG == null'
      when: on_success
    - when: never

code_style:
  <<: *branch_tests
  stage: code_standarts
  variables:
    TOX_ENVS: "flake,mypy,pylint"

py36-django30-install:
  <<: *branch_tests
  variables:
    TOX_ENVS: "$CI_BUILD_NAME"

py38-django22-coverage:
  <<: *branch_tests
  cache: {}
  variables:
    TOX_ENVS: "$CI_BUILD_NAME"


pages:
  <<: *branch_tests
  stage: release
  variables:
    TOX_ENVS: "builddoc"
  cache:
    <<: *global_cache
    policy: pull
  script:
    - tox -e $TOX_ENVS $TOX_ARGS
    - mv -v doc/_build/html public
  artifacts:
    paths:
    - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - when: never

release:
  stage: release
  cache: {}
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $GIT_ACCESS_USER && $GIT_ACCESS_PASSWORD'
      when: on_success
    - when: never
  before_script:
    - url_host=`echo "${CI_REPOSITORY_URL}" | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git config user.name "${GITLAB_USER_NAME}"
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git remote set-url origin "https://${GIT_ACCESS_USER}:${GIT_ACCESS_PASSWORD}@${url_host}"
  script:
    - bash autorelease.sh

release_pypi:
  stage: release
  image: vstconsulting/images:build
  cache:
    <<: *global_cache
    policy: pull
  rules:
    - if: '$CI_COMMIT_TAG && $PYPI_UPLOAD_PASSWORD && $PYPI_UPLOAD_NAME'
      when: on_success
    - when: never
  script:
    - tox -e build
    - twine upload -u ${PYPI_UPLOAD_NAME} -p ${PYPI_UPLOAD_PASSWORD} $(find dist/*.{tar.gz,whl})
  allow_failure: true
