default:
  image: vstconsulting/images:build
  cache: &global_cache
    paths:
      - node_modules/
    policy: pull-push


variables:
  GET_SOURCES_ATTEMPTS: 3
  ARTIFACT_DOWNLOAD_ATTEMPTS: 3
  RESTORE_CACHE_ATTEMPTS: 3
  DJANGO_LOG_LEVEL: 'CRITICAL'
  TOX_ARGS: "--workdir /cache/.tox_vstutils_${CI_BUILD_REF_NAME}"
  CC: "ccache gcc"

stages:
  - code_standarts
  - test
  - release


.branch_tests_template: &branch_tests
  stage: test
  image: vstconsulting/images:build
  variables:
    TOX_ENVS: "flake,pylint,jshint,py36-django-install,py37-django-install"
  before_script:
    - if [ "${CI_BUILD_REF_NAME}" != "master" -a "${CI_BUILD_REF_NAME}" != "developer" ]; then export TOX_ARGS="--workdir /tmp/.tox_vstutils_${CI_BUILD_REF_NAME}"; fi
  script:
   - tox -e $TOX_ENVS $TOX_ARGS
  except:
    refs:
    - tags
  only:
    refs:
      - master
      - merge_requests
      - issue/build
    changes:
      - vstutils/*.{py,pyx}
      - vstutils/api/**
      - vstutils/gui/*
      - vstutils/templatetags/*
      - test_src/**/*
      - .coveragerc
      - .pep8
      - .pylintrc
      - .gitlab-ci.yml
      - requirements*
      - setup.{cfg,py}
      - MANIFEST.in
      - tox.ini


code_style:
  <<: *branch_tests
  stage: code_standarts
  variables:
    TOX_ENVS: "flake,pylint,jshint"
  only:
    refs:
      - master
      - merge_requests
      - issue/build
    changes:
      - vstutils/**/*
      - frontend_src/**/*
      - tox.ini
      - .pep8
      - .pylintrc
      - .gitlab-ci.yml

py36-django22-install:
  <<: *branch_tests
  variables:
    TOX_ENVS: "$CI_BUILD_NAME"

py38-django22-coverage:
  <<: *branch_tests
  variables:
    TOX_ENVS: "$CI_BUILD_NAME"


pages:
  <<: *branch_tests
  stage: release
  variables:
    TOX_ENVS: "builddoc"
  cache:
    <<: *global_cache
    policy: pull
  script:
    - tox -e $TOX_ENVS $TOX_ARGS
    - mv -v doc/_build/html public
  artifacts:
    paths:
    - public
  only:
    refs:
      - master

release:
  stage: release
  cache: {}
  only:
    refs:
      - master
    variables:
      - $GIT_ACCESS_USER
      - $GIT_ACCESS_PASSWORD
  before_script:
    - url_host=`echo "${CI_REPOSITORY_URL}" | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git config user.name "${GITLAB_USER_NAME}"
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git remote set-url origin "https://${GIT_ACCESS_USER}:${GIT_ACCESS_PASSWORD}@${url_host}"
  script:
    - bash autorelease.sh

.release_pypi_template: &release_pypi
  stage: release
  image: vstconsulting/images:build
  cache:
    <<: *global_cache
    policy: pull
  only:
    refs:
      - tags
    variables:
      - $PYPI_UPLOAD_PASSWORD
      - $PYPI_UPLOAD_NAME
  script:
   - tox -c tox_build.ini -e ${CI_BUILD_NAME},auditwheel
   - twine upload -u ${PYPI_UPLOAD_NAME} -p ${PYPI_UPLOAD_PASSWORD} $(find dist/*.{tar.gz,whl})
  allow_failure: true

py37-build:
  <<: *release_pypi

py36-wheel:
  <<: *release_pypi

py37-wheel:
  <<: *release_pypi

py38-wheel:
  <<: *release_pypi
